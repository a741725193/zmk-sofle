#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <175>;
};

&lt { tapping-term-ms = <175>; };

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp EQUAL                      &kp N1  &kp N2          &kp N3              &kp N4            &kp N5           &kp UP_ARROW     &kp N6   &kp N7             &kp N8               &kp N9          &kp N0     &kp MINUS
&kp GRAVE                      &kp Q   &kp W           &kp E               &kp R             &kp T            &kp DOWN_ARROW   &kp Y    &kp U              &kp I                &kp O           &kp P      &kp BACKSLASH
&kp ESCAPE                     &kp A   &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G            &kp LEFT_ARROW   &kp H    &mt RIGHT_SHIFT J  &mt RIGHT_CONTROL K  &mt LEFT_ALT L  &kp SEMI   &kp APOS
&mt LEFT_CONTROL LEFT_BRACKET  &kp Z   &kp X           &kp C               &kp V             &kp B            &kp RIGHT_ARROW  &kp N    &kp M              &kp COMMA            &kp DOT         &kp SLASH  &kp RIGHT_BRACKET
&kp C_MUTE                     &trans  &trans          &kp LEFT_GUI        &lt 3 SPACE       &kp BACKSPACE    &kp ENTER        &kp TAB  &lt 4 RET          &kp DELETE           &trans          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "BASE";
        };

        dvorak {
            display-name = "DVORAK";
            bindings = <
&kp LS(BACKSLASH)  &kp LS(EQUAL)  &kp LEFT_BRACKET  &kp LS(LEFT_BRACKET)  &kp LS(N9)  &kp LS(N7)    &kp UP_ARROW     &kp EQUAL  &kp LS(N0)  &kp LS(RIGHT_BRACKET)  &kp RIGHT_BRACKET  &kp LS(N8)  &kp LS(NUMBER_1)
&kp LS(NUMBER_4)   &kp SEMICOLON  &kp COMMA         &kp PERIOD            &kp P       &kp Y         &kp DOWN_ARROW   &kp F      &kp G       &kp C                  &kp R              &kp L       &kp NON_US_BACKSLASH
&kp ESCAPE         &kp A          &mt O LEFT_ALT    &mt LEFT_CONTROL E    &lt 2 U     &kp I         &kp LEFT_ARROW   &kp D      &lt 2 H     &mt RIGHT_CONTROL T    &mt RIGHT_ALT N    &kp S       &kp MINUS
&kp SLASH          &kp SQT        &kp Q             &kp J                 &kp K       &kp X         &kp RIGHT_ARROW  &kp B      &kp M       &kp W                  &kp V              &kp Z       &kp LS(NUMBER_2)
&kp C_MUTE         &trans         &trans            &trans                &trans      &trans        &kp ENTER        &trans     &trans      &trans                 &trans             &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        dvorak2 {
            display-name = "DVORAK";
            bindings = <
&kp GRAVE      &kp NUMBER_1       &kp NUMBER_2            &kp N3                      &kp NUMBER_4  &kp N5       &kp UP_ARROW     &kp NUMBER_6  &kp N7     &kp N8                       &kp N9                   &kp N0     &kp LS(N5)
&kp LS(GRAVE)  &kp LS(SEMICOLON)  &kp LS(COMMA)           &kp LS(PERIOD)              &kp LS(P)     &kp LS(Y)    &kp DOWN_ARROW   &kp LS(F)     &kp LS(G)  &kp LS(C)                    &kp LS(R)                &kp LS(L)  &kp LS(NUMBER_3)
&trans         &kp LS(A)          &mt LS(LEFT_ALT) LS(O)  &mt LS(LEFT_CONTROL) LS(E)  &kp LS(U)     &kp LS(I)    &kp LEFT_ARROW   &kp LS(D)     &kp LS(H)  &mt LS(RIGHT_CONTROL) LS(T)  &mt LS(RIGHT_ALT) LS(N)  &kp LS(S)  &kp LS(MINUS)
&kp LS(FSLH)   &kp LS(APOS)       &kp LS(Q)               &kp LS(J)                   &kp LS(K)     &kp LS(X)    &kp RIGHT_ARROW  &kp LS(B)     &kp LS(M)  &kp LS(W)                    &kp LS(V)                &kp LS(Z)  &kp LS(NUMBER_6)
&kp C_MUTE     &trans             &trans                  &trans                      &trans        &trans       &kp ENTER        &trans        &trans     &trans                       &trans                   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        layer2 {
            display-name = "NAV&Fn";
            bindings = <
&kp KP_NUMLOCK  &kp F1            &kp F2    &kp F3          &kp F4     &kp F5           &mmv MOVE_UP     &kp F6           &kp F7           &kp F8           &kp F9           &kp F10       &kp F11
&trans          &trans            &kp HOME  &kp UP_ARROW    &kp END    &kp PG_UP        &mmv MOVE_DOWN   &kp KP_DIVIDE    &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS  &kp F12
&trans          &kp LS(LEFT_ALT)  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &kp PAGE_DOWN    &mmv MOVE_LEFT   &kp KP_MULTIPLY  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS   &trans
&trans          &trans            &trans    &trans          &trans     &trans           &mmv MOVE_RIGHT  &kp EQUAL        &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DOT    &trans
&kp C_MUTE      &trans            &trans    &trans          &trans     &trans           &mkp LCLK        &trans           &trans           &kp KP_NUMBER_0  &trans           &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer3 {
            label = "CON";
            bindings = <
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp C_MUTE       &kp C_VOLUME_DOWN  &kp C_VOL_UP     &trans  &trans  &trans
&bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans          &mmv MOVE_DOWN   &trans           &rgb_ug RGB_SPD    &rgb_ug RGB_SPI  &trans  &trans  &trans
&trans          &out OUT_USB  &out OUT_BLE  &trans        &trans        &trans          &mmv MOVE_LEFT   &trans           &rgb_ug RGB_BRD    &rgb_ug RGB_BRI  &trans  &trans  &trans
&trans          &sys_reset    &trans        &bootloader   &soft_off     &trans          &mmv MOVE_RIGHT  &rgb_ug RGB_TOG  &rgb_ug RGB_EFR    &rgb_ug RGB_EFF  &trans  &trans  &trans
&trans          &trans        &trans        &trans        &tog 1        &tog 5          &mkp LCLK        &trans           &trans             &trans           &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        arw {
            label = "R_ARW";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans      &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans      &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans      &kp UP_ARROW    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp RETURN  &kp DOWN        &kp RIGHT
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans      &kp LEFT_ARROW
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
